# -*- coding: utf-8 -*-
"""Amath481_HW1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r0kTA72_MEG_j-3QVDk9tb9Tf5Rot_qi
"""

import numpy as np
import matplotlib.pyplot as plt

# the function & the derivative
fx = x * np.sin(3*x) - np.exp(x)
dfx = x * cos(3*x) * 3 + sin(3*x) - np.exp(x)

# Newton-Raphson method
x = np.array([-1.6]) # initial guess
for j in range(1000):
  x = np.append(x,x[j]-fx/dfx)
  fc = np.exp(x[j + 1]) - np.tan(x[j + 1])
  if abs(fc) < 1e-6:
    break
print(x[j + 1])
print(fc)

# Bisection
xr = -0.4
xl = -0.7
for j in range(0, 100):
  xc = (xr + xl)/2
  fc = xc*np.sin(3*xc)-np.exp(xc)
  if ( fc > 0 ):
    xl = xc
  else:
    xr = xc
  if ( abs(fc) < 10**(-6) ):
    display(xc); display(j)
    break

x = np.array([-4]) # initial guess
for j in range(1000):
  x = np.append(x,x[j]-)
  fc = np.exp(x[j + 1]) - np.tan(x[j + 1])
  if abs(fc) < 1e-5:
    break
print(x[j + 1])
print(fc)